@use "sass:string" as string;



/// Convert pixel unit to rems unit
/// @param $pixel - value in pixels.
/// @return - value in rems.
@function rems($pixels){
    @return #{$pixels / 16}rem;
}


/// Get the most contrast text (foreground) color based on a background color.
/// @param $bg-color - the background color behind the text.
/// @param $text-dark - define your dark color.
/// @param $text-light - define your light color.
/// @return - a text (foreground) color.
@function opt-text-color($bg-color, $text-dark: #000000, $text-light: #ffffff){
    @if (color.lightness($bg-color) >= 50) {
        @return $text-dark;
    }
    @else {
        @return $text-light;
    }
}


// credit: https://css-tricks.com/snippets/sass/str-replace-function/
/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    
    @if $index {
        @return string.slice($string, 1, $index - 1) + $replace + str-replace(string.slice($string, $index + str-length($search)), $search, $replace);
    }
    
    @return $string;
}



/// Determines the given string is null or empty string "".
/// @param {string} $string string to test
/// @return {Boolean} true if the given string is null or empty string "", otherwise false
@function str-is-empty($string) {
    @if ($string == null) { @return true; }
    @if ($string == "") { @return true; }

    @return string.length(str-replace($string, " ", "")) == 0;
}


/// Determines the given string is not null and not empty string "".
/// @param {string} $string string to test
/// @return {Boolean} true if the given string is not null and not empty string "", otherwise false
@function str-not-empty($string) {
    @if ($string == null) { @return false; }
    @if ($string == "") { @return false; }

    @return string.length(str-replace($string, " ", "")) > 0;
}



@function cssvar($var-prefix) {
    @if (str-not-empty($var-prefix)) {
        @return "--#{$var-prefix}-";
    }
    @else {
        @return "--";
    }
}


@function part-combine($var-prefix-a, $var-prefix-b) {
    @if (str-not-empty($var-prefix-a)) {
        @if (str-not-empty($var-prefix-b)) {
            @return "#{$var-prefix-a}-#{$var-prefix-b}";
        }
        @else {
            @return $var-prefix-a;
        }
    }
    @else {
        @if (str-not-empty($var-prefix-b)) {
            @return $var-prefix-b;
        }
        @else {
            @return "";
        }
    }
}



@function selector-parent($selector) {
    $bracket: 0;
    $has-comma: true;
    $index: 1;
    @while ($index <= string.length($selector)) {
        $char: string.slice($selector, $index, $index);
        
        @if ($char == ",") {
            $has-comma: true;
        }
        @else if($char != " ") {
            @if (($char == "(") or ($char == "{") or ($char == "[")) { $bracket: $bracket + 1; }
            @else if (($char == ")") or ($char == "}") or ($char == "]")) { $bracket: $bracket - 1; }
            @else if ($bracket == 0) {
                @if (($char == ".") or ($char == ":")) {
                    @if ($has-comma == true) {
                        $selector: string.slice($selector, 1, $index - 1) + "&" + string.slice($selector, $index);
                    }
                }
            }

            $has-comma: false;
        }

        $index: $index + 1;
    }

    @return $selector;
}